losses
======

.. py:module:: losses


Attributes
----------

.. autoapisummary::

   losses.sf


Classes
-------

.. autoapisummary::

   losses.IGVLoss
   losses.IncidenceLoss
   losses.ShockLoss
   losses.DiffusionLoss
   losses.ChokingLoss
   losses.SupercriticalLoss
   losses.BladeloadingLoss
   losses.SkinfrictionLoss
   losses.ClearanceLoss
   losses.RecirculationLoss
   losses.LeakageLoss
   losses.DiscfrictionLoss
   losses.MixingLoss
   losses.VanelessdiffuserLoss
   losses.VaneddiffuserLoss
   losses.VoluteLoss


Module Contents
---------------

.. py:class:: IGVLoss

   Container of the Inlet Guide Vane (IGV) loss

   .. attribute:: _type

      Class attribute and not instance attribute. Define the type of loss

      :type: string, defaults to ``'outside'``

   .. attribute:: _name

      Class attribute and not instance attribute. Define the name of the loss

      :type: string, defaults to ``'IGV'``

   .. note:: To implement as needed, no IGV used yet


   .. py:attribute:: _type
      :value: 'outside'



   .. py:attribute:: _name
      :value: 'IGV'



.. py:class:: IncidenceLoss

   Container of the Incidence loss for an impeller

   The incidence loss is due to the adjustement of the flow direction at the inlet of the impeller (:cite:t:`2012:Parisi`).

   .. attribute:: _type

      Class attribute and not instance attribute. Define the type of loss

      :type: string, defaults to ``'internal'``

   .. attribute:: _name

      Class attribute and not instance attribute. Define the name of the loss

      :type: string, defaults to ``'Incidence'``

   .. attribute:: _value

      computed massic enthalpy loss value

      :type: float, defaults to ``0``

   .. attribute:: _finc

      fraction of the velocity component perpendical to the optimal flow direction, main parameter of the model

      usually between 0.5 and 0.7 (:cite:t:`2012:Parisi`)

      :type: float, defaults to ``0.6``


   .. py:attribute:: _type
      :value: 'internal'



   .. py:attribute:: _name
      :value: 'Incidence'



   .. py:attribute:: _finc
      :value: 0.6



   .. py:attribute:: _value
      :value: 0



   .. py:method:: compute_loss(inlet_velocity, inlet_blade_angle, inlet_optimal_angle)

      Computes and updates the incidence loss value ``_value``

      The incidence loss is computed as explained in :cite:t:`2012:Parisi` and :cite:t:`2000:Aungier`.
      First the non optimal component of the speed :math:`W_{\mathrm{nonopt}\ i}` is computed for the hub, mid and tip positions given by the subscript :math:`i` by :
      :math:`W_{\mathrm{nonopt}\ i} = W_{1\ i} \mathrm{sin}\left| \beta_{1\ i} - \beta_{1\ \mathrm{opti}\ i} \right|`
      where :math:`\beta_{1\ \mathrm{opti}\ i}` is the inlet optimal blade angle and :math:`\beta_{1\ i}` is the actual inlet blade angle.

      Then the enthalpy loss is computed as :math:`\Delta h_i = \frac{1}{2} f_{\mathrm{inc}} W_{\mathrm{nonopt}\ i}^2`
      with :math:`f_{\mathrm{inc}}` the incidence parameter given by the class attribute ``_finc``.
      Finally, the total enthalpy loss is given by :math:`\frac{\Delta h_{\mathrm{hub}} + 10\Delta h_{\mathrm{mid}} + \Delta h_{\mathrm{tip}}}{12}`

      :param inlet_velocity: V, W, U velocities for hub, mid and tip
      :type inlet_velocity: 3 x 3 x 2 array of float
      :param inlet_blade_angle: hub, mid and tip blade angles at the inlet
      :type inlet_blade_angle: 3 x 1 array of float
      :param inlet_optimal_angle: hub, mid and tip optimal blade angles at the inlet
      :type inlet_optimal_angle: 3 x 1 array of float

      :returns: **_value** -- computed massic enthalpy loss value
      :rtype: float



.. py:class:: ShockLoss

   Container of the Shock loss for an impeller

   Shock loss is considered when the inlet relative speed is sonic and shock-waves develop at the inlet.

   .. attribute:: _type

      Class attribute and not instance attribute. Define the type of loss

      :type: string, defaults to ``'internal'``

   .. attribute:: _name

      Class attribute and not instance attribute. Define the name of the loss

      :type: string, defaults to ``'Shock'``

   .. attribute:: _value

      computed massic enthalpy loss value

      :type: float, defaults to ``0``


   .. py:attribute:: _type
      :value: 'internal'



   .. py:attribute:: _name
      :value: 'Shock'



   .. py:attribute:: _value
      :value: 0



   .. py:method:: compute_loss(kpv, inlet_temperature, inlet_velocity, inlet_speedofsound, dhdT)

      Computes the loss caused by a shockwave in the impeller section

      The shock loss is based on :cite:t:`2012:Parisi` assumptions ie.:

      1. Normal shock-wave
      2. Compressibility factor, heat capacity and isentropic exponent are constant across the shock-wave.

      The total temperature in the shock :math:`T_{t1\ \mathrm{sh}}` is computed as a function of
      the inlet total temperature :math:`T_{t1}`,
      the inlet Mach number :math:`M_{w1}` and
      the isentropic expansion coefficient :math:`k`:

      :math:`\frac{T_{t1\ \mathrm{sh}}}{T_{t1}} = \frac{(k + 1)M_{w1}^2}{(k-1)M_{w1}^2 + 2} \left( \frac{k + 1}{2kM_{w1}^2 - (k - 1)} \right)^{\frac{1}{k}}`

      Then the enthalpy loss is given by :math:`\Delta h = \left( \frac{\partial h}{\partial T} \right)_{P\ 1} \left( T_{t1} - T_{t1\ \mathrm{sh}} \right)`


      Similarly as :func:`~losses.IncidenceLoss.compute_loss`, this computation is done at hub, mid and tip line then averaged:
      :math:`\frac{\Delta h_{\mathrm{hub}} + 10\Delta h_{\mathrm{mid}} + \Delta h_{\mathrm{tip}}}{12}`


      :param kpv: Isentropic expansion coefficient (Cp/Cv) values for [hub, mid, tip] line at the inlet of the impeller
      :type kpv: array of floats of length 3

      :returns: **_value** -- Massic enthalpy loss from shockwave

                0 if all the inlet relative Mach number are less than 1
      :rtype: float



.. py:class:: DiffusionLoss

   Container of the Diffusion loss for an impeller

   Diffusion loss is a loss occuring between the inlet and the throat due to a slowdown of the fluid.
   Stall is also considered when the diffusion loss is excessive.

   .. attribute:: _type

      Class attribute and not instance attribute. Define the type of loss

      :type: string, defaults to ``'internal'``

   .. attribute:: _name

      Class attribute and not instance attribute. Define the name of the loss

      :type: string, defaults to ``'Diffusion'``

   .. attribute:: _value

      computed massic enthalpy loss value

      :type: float, defaults to ``0``

   .. attribute:: _difforstall

      string indicating if diffusion, stall or incidence is prevalent

      :type: string, defaults to ``None``


   .. py:attribute:: _type
      :value: 'internal'



   .. py:attribute:: _name
      :value: 'Diffusion'



   .. py:attribute:: _value
      :value: 0



   .. py:attribute:: _difforstall
      :value: None



   .. py:method:: compute_diffusion_loss_component(impeller_inlet_velocity_W1mid, throat_velocity, incidenceloss_param)

      Computes and returns the diffusion loss component for the diffusion loss

      The diffusion loss is given by :cite:t:`2000:Aungier` as: :math:`\Delta h_{\mathrm{diff}} = \mathrm{max}\left( 0.5 f_{\mathrm{inc}}\ ;\ 0.4 \right) \left( W_{1\ \mathrm{mid}} - W_{\mathrm{throat}} \right)^2`
      where :math:`W_{1\ \mathrm{mid}}` is the relative velocity of the fluid at the mean line of the inlet of the impeller,
      :math:`W_{\mathrm{throat}}` the relative velocity at the throat of the impeller.
      The :math:`\mathrm{max}` is added since some authors consider the incidence factor while some others consider a factor of ``0.4``.

      :param impeller_inlet_velocity_W1mid: Norm of impeller's relative velocity at the mean line of the inlet
      :type impeller_inlet_velocity_W1mid: float
      :param throat_velocity: Relative velocity in the throat section given by the continuity equation at the throat assuming that the flow is perpendicular to the throat area
      :type throat_velocity: float
      :param incidenceloss_param: See ``IncidenceLoss._finc``
      :type incidenceloss_param: float

      :returns: **dh_diff** -- computed massic enthalpy loss for the diffusion component
      :rtype: float



   .. py:method:: compute_stall_loss_component(impeller_inlet_velocity_W1tip, throat_velocity)

      Computes the stall loss component of the diffusion loss model

      The stall loss is given by :cite:t:`2000:Aungier` as: :math:`\Delta h_{\mathrm{stall}} = 0.5 \left( W_{1\ \mathrm{mid}} - 1.75 W_{\mathrm{throat}} \right)^2`
      if :math:`W_{1\ \mathrm{mid}} > 1.75 W_{\mathrm{throat}}`
      where :math:`W_{1\ \mathrm{mid}}` is the relative velocity of the fluid at the mean line of the inlet of the impeller,
      :math:`W_{\mathrm{throat}}` the relative velocity at the throat of the impeller.

      :param impeller_inlet_velocity_W1tip: Norm of impeller's relative velocity at the tip line of the inlet
      :type impeller_inlet_velocity_W1tip: float
      :param throat_velocity: Relative velocity in the throat section given by the continuity equation at the throat assuming that the flow is perpendicular to the throat area
      :type throat_velocity: float

      :returns: **dh_stall** -- computed massic enthalpy loss for the stall component
      :rtype: float



   .. py:method:: compute_loss(impeller_inlet_velocity_W1mid, impeller_inlet_velocity_W1tip, throat_velocity, incidenceloss, incidenceloss_param)

      Computes and returns the diffusion loss of the impeller ; stall is also considered. The value is stored in ``_value``.

      Diffusion, stall and incidence are considered. Only the part above the incidence loss from :func:`~losses.IncidenceLoss` is considered.
      Effectively, this means that the enthalpy loss is computed as
      :math:`\mathrm{max}\left( h_{\mathrm{diff}}\ ;\ h_{\mathrm{stall}}\ ;\ h_{\mathrm{inc}} \right) - h_{\mathrm{inc}}`

      :param impeller_inlet_velocity_W1mid: Impeller's relative velocity (norm) at the mean line of the inlet
      :type impeller_inlet_velocity_W1mid: float
      :param impeller_inlet_velocity_W1tip: Impeller's relative velocity (norm) at the tip line of the inlet
      :type impeller_inlet_velocity_W1tip: float
      :param throat_velocity: Relative velocity in the throat section given by the continuity equation at the throat assuming that the flow is perpendicular to the throat area
      :type throat_velocity: float
      :param incidenceloss: Incidence loss, usuallu computed by :func:`~losses.IncidenceLoss.compute_incidence_loss()`
      :type incidenceloss: float
      :param incidenceloss_param: Incidence loss parameter from :func:`~losses.IncidenceLoss._finc`
      :type incidenceloss_param: float

      :returns: **_value** -- massic enthalpy loss
      :rtype: float



.. py:class:: ChokingLoss

   Container of the Choking loss for an impeller

           Choking loss is a loss occuring when the fluid approaches sonic conditions near the throat.
           The computation is done following the formula of :cite:t:`1995:Aungier`:

           :math:`\Delta h = 0.5 W_{1\ \mathrm{mid}}^2 \left(0.05 x + x^7 \right)`
   with
           :math:`W_{1\ \mathrm{mid}}^2` the impeller inlet relative velocity for the mean line and
           :math:`x = 10 \left( 1.1 - A_{\mathrm{throat}}/A^* \right)`

           Attributes
           ----------
           _type : string, defaults to ``'internal'``
               Class attribute and not instance attribute. Define the type of loss
           _name : string, defaults to ``'Choking'``
                   Class attribute and not instance attribute. Define the name of the loss
           _value : float, defaults to ``0``
                    computed massic enthalpy loss value



   .. py:attribute:: _type
      :value: 'internal'



   .. py:attribute:: _name
      :value: 'Choking'



   .. py:attribute:: _value
      :value: 0



   .. py:method:: compute_ratioarea(mach, kpv)

      Computes the ratio of sonic area over the area for the throat and returns it

      The ratio of sonic area over the area is given by :cite:t:`1961:Dixon` equation 80:
      :math:`\frac{A^*}{A_{\mathrm{throat}}} = \left( \left( \frac{k + 1}{2} \right)^{\frac{k + 1}{2(k - 1)}} Ma \left( 1 + \frac{k - 1}{2} Ma^2 \right) \right)^{- \frac{k + 1}{2(k - 1)}}`

      :param mach: Mach number at the mid line of the throat of the impeller
      :type mach: float
      :param kpv: Isentropic expansion coefficient at the throat of the impeller mid line
      :type kpv: float

      :returns: **a*/a** -- A*/Athroat ratio of sonic area over the area according to :cite:t:`1961:Dixon` equation 80.
      :rtype: float



   .. py:method:: compute_loss(mach, kpv, w1mid)

      Computes the choking loss, stores it in ``_value`` and returns it

                  The computation is done following the formula of :cite:t:`1995:Aungier`:

                  :math:`\Delta h = 0.5 W_{1\ \mathrm{mid}}^2 \left(0.05 x + x^7 \right)`
      with
                  :math:`W_{1\ \mathrm{mid}}^2` the impeller inlet relative velocity for the mean line and
                  :math:`x = 10 \left( 1.1 - A_{\mathrm{throat}}/A^* \right)`

                  Parameters
                  ----------
                  mach : float
                         Mach number at the mid line of the throat of the impeller
                  kpv : float
                        Isentropic expansion coefficient at the throat of the impeller mid line
                  w1mid : float
                          Norm relative velocity at the mid line of the inlet of the compressor

                  Returns
                  -------
                  dh : float
                       massic enthalpy loss




.. py:class:: SupercriticalLoss

   Container of the Supercritical loss for an impeller

   Supercritical loss is a loss corresponding to additional shocks inside the blade passage due to the local acceleration on the suction side.
   The supercritical loss is computed from :cite:t:`2012:Parisi` and :cite:t:`1995:Aungier`.
   First the maximal relative speed is computed as: :math:`W_\mathrm{max} = \left( W_{1\ \mathrm{mid}} + W_2 + \Delta W \right)/2`
   with :math:`W_{1\ \mathrm{mid}}` the impeller's inlet relative velocity for the mid line,
   :math:`W_2` the impeller's outlet relative velocity and the optimal speed distribution leading to
   :math:`\Delta W = \frac{2 \pi D_2 L_\mathrm{eul}}{N_{\mathrm{b\ eff}} L_\mathrm{b} U_2}`.
   Using usual nomenclature, :math:`D_2` is the impeller's outlet diameter,
   :math:`L_\mathrm{eul}` the impeller's Eulerian work,
   :math:`N_{\mathrm{b\ eff}` the number of effective blades (includes splitters effects),
   :math:`L_\mathrm{b}` the blade length and :math:`U_2` the impeller's outlet tangential speed.


   The critical mach number is then computed with
   :math:`M_{\mathrm{crit}} = M_{\mathrm{W}\ 1\ \mathrm{mid}} W^*/W_\mathrm{max}`
   where :math:`W^*` is the speed of sound for the throat and
   :math:`M_{\mathrm{W}\ 1\ \mathrm{mid}}` the impeller's inlet Mach number for the relative speed
   at the mid line.


   Finally, the enthalpy loss is computed with:
   :math:`\Delta h = f_\mathrm{sup} \frac{W_\mathrm{max}^2}{2}\left( M_{\mathrm{W}\ 1\ \mathrm{mid}} - M_\mathrm{crit}\right)`


   .. attribute:: _type

      Class attribute and not instance attribute. Define the type of loss

      :type: string, defaults to ``'internal'``

   .. attribute:: _name

      Class attribute and not instance attribute. Define the name of the loss

      :type: string, defaults to ``'Supercritical'``

   .. attribute:: _value

      computed massic enthalpy loss value

      :type: float, defaults to ``0``

   .. attribute:: _fsup

      Experimental coefficient

      :type: float, defaults to ``0.4``

   .. attribute:: _wmax

      Maximum speed point considering an optimal velocity distribution

      :type: float, defaults to ``0``

   .. attribute:: _Mcr

      Critical Mach value at the inlet condition causing sonic conditions for the maximum velocity point

      :type: float, defaults to ``0``

   .. attribute:: _mach

      Mach number for the inlet relative speed at the mean line

      :type: float, defaults to ``0``


   .. py:attribute:: _type
      :value: 'internal'



   .. py:attribute:: _name
      :value: 'Supercritical'



   .. py:attribute:: _value
      :value: 0



   .. py:attribute:: _fsup
      :value: 0.4



   .. py:attribute:: _wmax
      :value: 0



   .. py:attribute:: _Mcr
      :value: 0



   .. py:attribute:: _mach
      :value: 0



   .. py:method:: compute_max_velocity(outlet_diameter, eulerian_work, effective_number_blade, blade_length, inlet_velocities, outlet_velocities)

      Computes and stores the max velocity ``_wmax`` to be used for the supercritical loss computation

      From :cite:t:`2012:Parisi`:
      :math:`W_\mathrm{max} = \left( W_{1\ \mathrm{mid}} + W_2 + \Delta W \right)/2`
      with :math:`W_{1\ \mathrm{mid}}` the impeller's inlet relative velocity for the mid line,
      :math:`W_2` the impeller's outlet relative velocity and the optimal speed distribution leading to
      :math:`\Delta W = \frac{2 \pi D_2 L_\mathrm{eul}}{N_{\mathrm{b\ eff}} L_\mathrm{b} U_2}`.
      Using usual nomenclature, :math:`D_2` is the impeller's outlet diameter,
      :math:`L_\mathrm{eul}` the impeller's Eulerian work,
      :math:`N_{\mathrm{b\ eff}` the number of effective blades (includes splitters effects),
      :math:`L_\mathrm{b}` the blade length and :math:`U_2` the impeller's outlet tangential speed.


      :param outlet_diameter: Impeller's outlet diameter :math:`D_2`
      :type outlet_diameter: float
      :param eulerian_work: Eulerian work of the impeller :math:`L_\mathrm{eul}`
      :type eulerian_work: float
      :param effective_number_blade: Number of effective blades according :math:`N_{\mathrm{b\ eff}`
      :type effective_number_blade: float
      :param blade_length: Length of the blade :math:`L_\mathrm{b}`
      :type blade_length: float
      :param inlet_velocities: velocities V, W, U for hub, mid and tip line with radial and tangential coordinates
      :type inlet_velocities: 3x2x2 array of float
      :param outlet_velocities: Velocities V, W, U for hub, mid and tip line.
      :type outlet_velocities: 3x3x2 array of floats



   .. py:method:: compute_loss(outlet_diameter, eulerian_work, effective_number_blade, blade_length, inlet_velocities, outlet_velocities, mach_number, speedsound_throat)

      Computes the supercritical loss, stores it in ``_value`` and returns ``_value``

      From :cite:t:`1995:Aungier` and :cite:t:`2012:Parisi`:
      the critical mach number is computed with
      :math:`M_{\mathrm{crit}} = M_{\mathrm{W}\ 1\ \mathrm{mid}} W^*/W_\mathrm{max}`
      where :math:`W^*` is the speed of sound for the throat and
      :math:`M_{\mathrm{W}\ 1\ \mathrm{mid}}` the impeller's inlet Mach number for the relative speed (parameter also stored in ``_mach``)
      at the mid line. The result is stored in ``_Mcr``


      Finally, the enthalpy loss is computed with:
      :math:`\Delta h = f_\mathrm{sup} \frac{W_\mathrm{max}^2}{2}\left( M_{\mathrm{W}\ 1\ \mathrm{mid}} - M_\mathrm{crit}\right)`
      and stored in ``_value`` before being returned.

      :param outlet_diameter: Impeller's outlet diameter :math:`D_2`
      :type outlet_diameter: float
      :param eulerian_work: Eulerian work of the impeller :math:`L_\mathrm{eul}`
      :type eulerian_work: float
      :param effective_number_blade: Number of effective blades according :math:`N_{\mathrm{b\ eff}`
      :type effective_number_blade: float
      :param blade_length: Length of the blade :math:`L_\mathrm{b}`
      :type blade_length: float
      :param inlet_velocities: velocities V, W, U for hub, mid and tip line with radial and tangential coordinates
      :type inlet_velocities: 3x2x2 array of float
      :param outlet_velocities: Velocities V, W, U for hub, mid and tip line.
      :type outlet_velocities: 3x3x2 array of floats
      :param mach_number: Mach number at inlet mid line of the impeller :math:`M_{\mathrm{W}\ 1\ \mathrm{mid}}`
      :type mach_number: float
      :param speedsound_throat: Speed of sound at the throat :math:`W^*`
      :type speedsound_throat: float

      :returns: **dh** -- massic enthalpy loss
      :rtype: float



.. py:class:: BladeloadingLoss

   Compute the blade loading loss in the impeller section due to the growth of a boundary layer in an adverse velocity gradient

   Equations 2.85, 2.86 and 2.87 of S. Parisi PhD thesis.


   .. py:attribute:: _type
      :value: 'internal'



   .. py:attribute:: _name
      :value: 'Blade loading'



   .. py:attribute:: _value
      :value: 0



   .. py:attribute:: _d
      :value: 0



   .. py:attribute:: _equation
      :value: None



   .. py:method:: compute_diffusion_Coppage(impeller_outlet_speed, impeller_inlet_tip_speed, eulerian_work, number_efficient_blades, impeller_outlet_diameter, impeller_inlet_tip_diameter, impeller_outlet_tangential_speed)

      Compute the diffusion factor for the loss model according to Coppage

      Equation 2.86 of S. Parisi PhD thesis. Best for low specific speed with no splitter.

      :param impeller_outlet_speed: Relative speed (norm ; W) at the outlet of the impeller.
      :type impeller_outlet_speed: float
      :param impeller_inlet_tip_speed: Relative speed (norm ; W) at the tip line of the impeller.
      :type impeller_inlet_tip_speed: float
      :param eulerian_work: Eulerian work of the impeller. Equation 2.12 of S. Parisi PhD thesis.
      :type eulerian_work: float
      :param number_efficient_blades: Number of efficient blades of the impeller. Equation 2.9 of S. Parisi PhD thesis.
      :type number_efficient_blades: float
      :param impeller_outlet_diameter: Diameter of the outlet of the impeller.
      :type impeller_outlet_diameter: float
      :param impeller_inlet_tip_diameter: Diameter of the impeller at the inlet for the tip line.
      :type impeller_inlet_tip_diameter: float
      :param impeller_outlet_tangential_speed: U2
      :type impeller_outlet_tangential_speed: float

      :returns: Coefficient of diffusion from Coppage model. Equation 2.86 of S. Parisi PhD thesis.
      :rtype: float



   .. py:method:: compute_diffusion_Whitfield(impeller_outlet_speed, impeller_inlet_tip_speed, eulerian_work, number_efficient_blades, impeller_outlet_diameter, impeller_inlet_tip_diameter, impeller_inlet_hub_diameter, outlet_blade_height, blade_length, impeller_outlet_tangential_speed)

      Compute the diffusion factor for the loss model according to Whitfield.

      Equation 2.87 of S. Parisi PhD thesis. Best for high specific speed with splitters.

      :param impeller_outlet_speed: Relative speed (norm ; W) at the outlet of the impeller.
      :type impeller_outlet_speed: float
      :param impeller_inlet_tip_speed: Relative speed (norm ; W) at the tip line of the impeller.
      :type impeller_inlet_tip_speed: float
      :param eulerian_work: Eulerian work of the impeller. Equation 2.12 of S. Parisi PhD thesis.
      :type eulerian_work: float
      :param number_efficient_blades: Number of efficient blades of the impeller. Equation 2.9 of S. Parisi PhD thesis.
      :type number_efficient_blades: float
      :param impeller_outlet_diameter: Diameter of the outlet of the impeller.
      :type impeller_outlet_diameter: float
      :param impeller_inlet_tip_diameter: Diameter of the impeller at the inlet for the tip line.
      :type impeller_inlet_tip_diameter: float
      :param impeller_inlet_hub_diameter: Diameter of the impeller at the inlet for the hub line.
      :type impeller_inlet_hub_diameter: float
      :param outlet_blade_height: Blade height at the outlet (:math:`b_2` in S. Parisi PhD thesis)
      :type outlet_blade_height: float
      :param blade_length: Length of a blade (equation 2.34 of S. Parisi PhD thesis)
      :type blade_length: float
      :param impeller_outlet_tangential_speed: Speed of the impeller (U)
      :type impeller_outlet_tangential_speed: float

      :returns: Coefficient of diffusion from Whitfield model. Equation 2.87 of S. Parisi PhD thesis.
      :rtype: float



   .. py:method:: compute_loss(type, impeller_outlet_speed, impeller_inlet_tip_speed, eulerian_work, number_efficient_blades, impeller_outlet_diameter, impeller_inlet_tip_diameter, impeller_outlet_tangential_speed, impeller_inlet_hub_diameter=0, outlet_blade_height=0, blade_length=0)

      Compute the blade loading loss

      Equation 2.85 of S. Parisi PhD thesis.

      impeller_outlet_speed : float
          Tangential relative speed (norm ; W2) at the outlet of the impeller.
      impeller_inlet_tip_speed : float
          Tangential relative speed at the tip line of the impeller.
      eulerian_work : float
          Eulerian work of the impeller. Equation 2.12 of S. Parisi PhD thesis.
      number_efficient_blades : float
          Number of efficient blades of the impeller. Equation 2.9 of S. Parisi PhD thesis.
      impeller_outlet_diameter : float
          Diameter of the outlet of the impeller.
      impeller_inlet_tip_diameter : float
          Diameter of the impeller at the inlet for the tip line.
      impeller_outlet_tangential_speed : float
          Speed of the impeller (U)
      impeller_inlet_hub_diameter : float, optional
          Diameter of the impeller at the inlet for the hub line, by default 0
      outlet_blade_height : float, optional
          Blade height at the outlet (:math:`b_2` in S. Parisi PhD thesis), by default 0
      blade_length : float, optional
          Length of a blade (equation 2.34 of S. Parisi PhD thesis), by default 0

      :returns: Blade loading loss according to equation 2.85 of S. Parisi PhD thesis.
      :rtype: float

      :raises NotImplementedError: if type is not Coppage or Whitfield, raises the implementation error



.. py:class:: SkinfrictionLoss

   Compute the skin friction loss component

   Equation 2.88 of S. Parisi PhD thesis.

   Colebrook-White equation solved with brentq xtol=1e-10 and rtol=1e-15


   Attribute
   -------
   _Ksf : float
       Fanning friction factor. Default is 4


   .. py:attribute:: _type
      :value: 'internal'



   .. py:attribute:: _name
      :value: 'Skin friction'



   .. py:attribute:: _value
      :value: 0



   .. py:attribute:: _Ksf
      :value: 4



   .. py:method:: compute_skinfrictionloss_speed(inlet_velocities, outlet_velocities)

      Compute the skin friction speed used for the skin friction loss

      Equation 2.89 of S. Parisi PhD thesis

      :param inlet_velocities: 3x3x2 array of floats
                               velocities V, W, U for hub, mid and tip line.
      :type inlet_velocities: array of float
      :param outlet_velocities: 3x3x2 array of floats
                                velocities V, W, U for hub, mid and tip line.
      :type outlet_velocities: array of float

      :returns: Meridional relative speed Wsf described by equation 2.89 of S. Parisi PhD thesis
      :rtype: float



   .. py:method:: compute_loss(bladelength, hydraulicdiameter, averageroughness, kinematicvisc, inlet_velocities, outlet_velocities)

      Compute the skin friction loss

      Equation 2.88 of S. Parisi PhD thesis

      :param bladelength: Blade length defined by equation 2.34 of S. Parisi PhD thesis
      :type bladelength: float
      :param hydraulicdiameter: Hydraulic diameter defined by equation 2.35 of S. Parisi PhD thesis
      :type hydraulicdiameter: float
      :param averageroughness: Average roughness of the surface after machining and eventual treatments also called Ra. Ra is usually around 3.2 µm for standard machining.
      :type averageroughness: float
      :param kinematicvisc: Kinematic viscosities of the inlet and outlet
      :type kinematicvisc: array of floats
      :param outlet_velocities: 3x3x2 array of floats
                                velocities V, W, U for hub, mid and tip line.
      :type outlet_velocities: array of float

      :returns: Loss of enthalpy due to the skin friction component defined by equation 2.88 of S. Parisi PhD thesis
      :rtype: float



   .. py:method:: compute_Reynolds(speed, length, kinematicvisc)

      Compute the Reynolds number

      :param speed: Speed to take into account for the Reynolds number
      :type speed: float
      :param length: Representative length to take into account for the Reynolds number
      :type length: float
      :param kinematicvisc: Kinematic viscosity of the fluid to compute the Reynolds number
      :type kinematicvisc: float

      :returns: Reynolds number
      :rtype: float



   .. py:method:: compute_fanningfactor(Reynolds, relativeroughnesseps)

      Compute the fanning factor cf

      Equation 2.91 of S. Parisi PhD thesis

      :param Reynolds: Reynolds number
      :type Reynolds: float
      :param relativeroughnesseps: Relative roughness equals to the average roughness of the surface divided by the hydraulic diameter
      :type relativeroughnesseps: float

      :returns: Fanning factor cf according to equation 2.91 of S. Parisi PhD thesis
      :rtype: float



   .. py:method:: solve_Colebrook_White(Reynolds, relativeroughnesseps)

      Find the root value of the Colebrook White equation to find the friction factor :math:`\lambda`

      Equation 2.92 of S. Parisi PhD thesis = 0

      :param Reynolds: Reynolds number of the flow
      :type Reynolds: float
      :param relativeroughnesseps: Average roughness / hydraulic diameter
      :type relativeroughnesseps: float

      :returns: Friction factor given by the Colebrook-White equation, equation 2.92 of S. Parisi PhD thesis
      :rtype: float



   .. py:method:: Colebrook_White_equation(frictionfactorlambda, relativeroughnesseps, Reynolds)

      Colebrook White function

      Equation 2.92 of S. Parisi PhD thesis

      :param frictionfactorlambda: Friction factor of the Colebrook-White equation, :math:`\lambda`
      :type frictionfactorlambda: float
      :param relativeroughnesseps: Relative roughness :math:`\epsilon` computed as the ratio of the average roughness of the surface and the hydraulic diameter
      :type relativeroughnesseps: float
      :param Reynolds: Reynolds number of the flow
      :type Reynolds: float

      :returns: Rest of the Colebrook White function re-written to be equal to 0 from equation 2.92 of S. Parisi PhD thesis
      :rtype: float



.. py:class:: ClearanceLoss

   Compute the clearance loss due to the clearance in front of the impeller

   Equation 2.93 of S. Parisi PhD thesis

   .. attribute:: _clearance

      clearance in front of the impeller, main parameter of the model

      usually between 0.1 mm and 1 mm

      :type: float


   .. py:attribute:: _type
      :value: 'internal'



   .. py:attribute:: _name
      :value: 'Clearance'



   .. py:attribute:: _value
      :value: 0



   .. py:attribute:: _clearance
      :value: 0.0002



   .. py:method:: compute_loss(outlet_velocities, inlet_mid_absolute_speed_radial, outlet_diameter, inlet_tip_diameter, inlet_hub_diameter, outlet_density, inlet_density, effective_number_blade, outlet_blade_height)

      Compute the clearance loss of the impeller

      Equation 2.93 of S. Parisi PhD thesis

      :param outlet_velocities: 3x3x2 array of floats
                                velocities V, W, U for hub, mid and tip line.
      :type outlet_velocities: array of float
      :param inlet_mid_absolute_speed_radial: Radial component of the absolute speed at the inlet of the impeller for the mid line Vm1mid
      :type inlet_mid_absolute_speed_radial: float
      :param outlet_diameter: Diameter of the impeller at the outlet
      :type outlet_diameter: float
      :param inlet_tip_diameter: Diameter of the impeller at the inlet for the tip line
      :type inlet_tip_diameter: float
      :param inlet_hub_diameter: Diameter of the impeller at the inlet for the hub line
      :type inlet_hub_diameter: float
      :param outlet_density: Density of the fluid at the outlet of the impeller
      :type outlet_density: float
      :param inlet_density: Density of the fluid at the inlet of the impeller
      :type inlet_density: float
      :param effective_number_blade: Effective number of blades for the impeller for instance equation 2.9 of S. Parisi PhD thesis
      :type effective_number_blade: float
      :param outlet_blade_height: Blade height at the outlet of the impeller
      :type outlet_blade_height: float

      :returns: clearance loss component according to 2.93 of S. Parisi PhD thesis
      :rtype: float



.. py:class:: RecirculationLoss

   Compute the recirculation loss that models the backflow from the vaneless diffuser to the impeller

   Equation 2.94 of S. Parisi PhD thesis


   .. py:attribute:: _type
      :value: 'parasitic'



   .. py:attribute:: _name
      :value: 'Recirculation'



   .. py:attribute:: _value
      :value: 0



   .. py:method:: compute_loss(type, tanflow_angle, diffusion_factor, impeller_linearspeed)

      Compute the recirculation loss (back flow from the diffuser to the impeller)

      Equation 2.94 of S. Parisi PhD thesis

      :param type: Equation applied. Should be Coppage or Oh
      :type type: string
      :param tanflow_angle: tan of exit absolute flow angle
      :type tanflow_angle: float
      :param diffusion_factor: Diffusion factor, see BladeloadingLoss class
      :type diffusion_factor: float
      :param impeller_linearspeed: Speed of the impeller (U2)
      :type impeller_linearspeed: float

      :returns: Recirculation loss according to Equation 2.94 of S. Parisi PhD thesis for Coppage type or equation 9 of https://doi.org/10.1016/j.cja.2017.08.002 for Oh
      :rtype: float

      :raises NotImplementedError: Raised if type is not Coppage or Oh



.. py:class:: LeakageLoss

   Compute the leakage loss for open or closed impellers

   For open impeller equation 2.98 of S. Parisi PhD thesis. Leakage from pressure side to suction side of the blade.

   For closed impeller equation 2.100 of S. Parisi PhD thesis. Leakage from high pressure to low pressure

   .. attribute:: _cd

      Experimental correction factor used for shrouded impellers, default is 0.9

      :type: float


   .. py:attribute:: _type
      :value: 'parasitic'



   .. py:attribute:: _name
      :value: 'Leakage'



   .. py:attribute:: _value
      :value: 0



   .. py:attribute:: _cd
      :value: 0.9



   .. py:attribute:: _equation
      :value: None



   .. py:attribute:: _clearancemassflow
      :value: 0



   .. py:method:: compute_DP_open(massflow, inlet_velocities, outlet_velocities, inlet_diameters, outlet_diameter, outlet_blade_height, blade_length, numbereffectiveblade)

      Compute the pressure difference between suction and pressure side

      Equation 2.95 of S. Parisi PhD thesis

      :param massflow: massflow of the compressor
      :type massflow: float
      :param inlet_velocities: 3x3x2 array of floats
                               velocities V, W, U for hub, mid and tip line.
      :type inlet_velocities: array of float
      :param outlet_velocities: 3x3x2 array of floats
                                velocities V, W, U for hub, mid and tip line.
      :type outlet_velocities: array of float
      :param inlet_diameters: Array of [hub mid tip] line diameters
      :type inlet_diameters: array of float
      :param outlet_diameter: Outlet diameter of the impeller
      :type outlet_diameter: float
      :param outlet_blade_height: Height of the blade at the outlet of the impeller
      :type outlet_blade_height: float
      :param blade_length: Blade length defined by equation 2.34 of S. Parisi PhD thesis
      :type blade_length: float
      :param numbereffectiveblade: Number of effective blade defined by equation 2.9 of S. Parisi PhD thesis
      :type numbereffectiveblade: float

      :returns: pressure difference between the pressure side and suction side according to equation 2.95 of S. Parisi PhD thesis
      :rtype: float



   .. py:method:: compute_loss(type='open', array_input=[])

      Wrapper to compute the Leakage loss

      type : string
          open or closed depending on impeller's geometry
      array_input_open : array
          array with the inputs for LeakageLoss.compute_leakageloss_open
      array_input_closed : array
          array with the inputs for LeakageLoss.compute_leakageloss_closed

      :returns: Leakage loss depending on the type used.
      :rtype: float

      :raises NotImplementedError: if type is not open or closed, raises the implementation error



   .. py:method:: compute_leakageloss_open(massflow, inlet_velocities, outlet_velocities, inlet_diameters, outlet_diameter, outlet_blade_height, blade_length, numbereffectiveblade, density_outlet, bladerunningclearance)

      Computes the leakage loss of an open impeller

      Equation 2.98 of S. Parisi PhD thesis

      :param massflow: massflow of the compressor
      :type massflow: float
      :param inlet_velocities: 3x3x2 array of floats
                               velocities V, W, U for hub, mid and tip line.
      :type inlet_velocities: array of float
      :param outlet_velocities: 3x3x2 array of floats
                                velocities V, W, U for hub, mid and tip line.
      :type outlet_velocities: array of float
      :param inlet_diameters: Array of [hub mid tip] line diameters
      :type inlet_diameters: array of float
      :param outlet_diameter: Outlet diameter of the impeller
      :type outlet_diameter: float
      :param outlet_blade_height: Height of the blade at the outlet of the impeller
      :type outlet_blade_height: float
      :param blade_length: Blade length defined by equation 2.34 of S. Parisi PhD thesis
      :type blade_length: float
      :param numbereffectiveblade: Number of effective blade defined by equation 2.9 of S. Parisi PhD thesis
      :type numbereffectiveblade: float
      :param density_outlet: density of the fluid at the outlet of the impeller
      :type density_outlet: float
      :param bladerunningclearance: blade running clearance of the impeller
      :type bladerunningclearance: float

      :returns: enthalpy lost from the leakage between pressure and suction side of the impeller blade according to equation 2.98 of S. Parisi PhD thesis
      :rtype: float



   .. py:method:: compute_leakageloss_closed(massflow, inlet_diameters, density_outlet, bladerunningclearance, numberofteethlaby, deltah_isentropic, Leulerian)

      Computes the leakage loss for a closed impeller

      Equation 2.100 of S. Parisi PhD thesis

      :param massflow: massflow of the compressor
      :type massflow: float
      :param inlet_diameters: Array of [hub mid tip] line diameters
      :type inlet_diameters: array of float
      :param density_outlet: Density of the fluid at the outlet of the impeller
      :type density_outlet: float
      :param bladerunningclearance: Blade running clearance of the impeller
      :type bladerunningclearance: float
      :param numberofteethlaby: Number of teeth in the labyrinth seal in front of the closed impeller
      :type numberofteethlaby: integer
      :param deltah_isentropic: Isentropic enthalpy of the transformation done by the impeller
      :type deltah_isentropic: float
      :param Leulerian: Eulerian work done by the enthalpy, equation 2.12 of S. Parisi PhD thesis
      :type Leulerian: float

      :returns: enthalpy lost from the high pressure side to the low pressure side of the impeller according to equation 2.100 of S. Parisi PhD thesis
      :rtype: float



.. py:class:: DiscfrictionLoss

   Computes the disc friction loss that models the friction at the back-face of the impeller

   Equations 2.101 to 2.103 of S. Parisi PhD thesis

   :param Loss: _description_
   :type Loss: _type_


   .. py:attribute:: _type
      :value: 'parasitic'



   .. py:attribute:: _name
      :value: 'Disc friction'



   .. py:attribute:: _value
      :value: 0



   .. py:attribute:: _Re
      :value: 0



   .. py:attribute:: _frictionfactor
      :value: 0



   .. py:method:: compute_friction_factor()

      Computes the friction factor

      Equation 2.102 of S. Parisi PhD thesis. Laminar to turbulent boundary layer transition is done at Re = 3e5

      :param Reynolds: Reynolds number of the flow at the outlet of the impeller
      :type Reynolds: float

      :returns: Friction factor according to equation 2.102 of S. Parisi PhD thesis to be used to compute the disc friction loss
      :rtype: float



   .. py:method:: compute_loss(outlet_velocity, outlet_diameter, outlet_density, massflow, outlet_kinematic_viscosity)

      Computes the disc friction loss of the impeller (back of the impeller)

      Equation 2.103 of S. Parisi PhD thesis

      :param outlet_velocities: 3x3x2 array of floats
                                velocities V, W, U for hub, mid and tip line.
      :type outlet_velocities: array of float
      :param outlet_diameter: Outlet diameter of the impeller
      :type outlet_diameter: float
      :param outlet_density: Density of the fluid at the outlet of the impeller
      :type outlet_density: float
      :param massflow: Massflow of the impeller
      :type massflow: float
      :param outlet_kinematic_viscosity: Kinematic viscosity at the outlet of the impeller
      :type outlet_kinematic_viscosity: float

      :returns: _description_
      :rtype: _type_



.. py:class:: MixingLoss

   Computes the mixing loss when the flow in the impeller separates

   Equations 2.104 to 2.108 of S. Parisi PhD thesis


   .. py:attribute:: _type
      :value: 'outside'



   .. py:attribute:: _name
      :value: 'Mixing'



   .. py:attribute:: _value
      :value: 0



   .. py:method:: compute_separation_velocity(max_speed, outlet_relative_velocity)

      Computes the separation velocity

      Equation 2.105 of S. Parisi PhD thesis. Separation velocity

      :param max_speed: Maximum speed obtained from Supercriticalloss.compute_max_velocity
      :type max_speed: float
      :param outlet_relative_velocity: Outlet relative velocity (norm, W2)
      :type outlet_relative_velocity: float

      :returns: Separation velocity according to equation 2.105 of S. Parisi PhD thesis to be used to compute the mixing loss
      :rtype: float



   .. py:method:: compute_loss(max_speed, inlet_velocities, outlet_velocities, impeller_outlet_area, impeller_outlet_diameter, outlet_blade_height)

      Computes the mixing loss

      Equation 2.108 of S. Parisi PhD thesis.

      :param max_speed: Maximum speed obtained from Supercriticalloss.compute_max_velocity
      :type max_speed: float
      :param outlet_velocities: 3x3x2 array of floats
                                velocities V, W, U for hub, mid and tip line of the impeller
      :type outlet_velocities: array of float
      :param impeller_outlet_area: impeller outlet area A2 eq. 2.43
      :type impeller_outlet_area: float
      :param impeller_outlet_diameter: impeller outlet diameter D2
      :type impeller_outlet_diameter: float
      :param outlet_blade_height: impeller outlet blade height b2
      :type outlet_blade_height: float

      :returns: Mixing loss 2.108 of S. Parisi PhD thesis
      :rtype: float



.. py:class:: VanelessdiffuserLoss

   .. py:attribute:: _type
      :value: 'outside'



   .. py:attribute:: _name
      :value: 'Vaneless diffuser'



   .. py:attribute:: _value
      :value: 0



   .. py:attribute:: _kcfvld
      :value: 0.01



   .. py:attribute:: _cf
      :value: 0



   .. py:attribute:: _Re
      :value: 0



   .. py:attribute:: _equation
      :value: None



   .. py:method:: compute_friction_factor()


   .. py:method:: compute_velocitydifftang(args)

      args is:
          0 impeller_outlet_velocity V2 [V2mid meridional ; V2mid tangential]
          1 diffuser_outlet_velocity 2 coordinates
          2 blade_height
          3 diffuser_outlet_height
          4 kinematicvisc: average kinematic viscosity used to compute the Reynolds number
          5 impeller_outlet_diameter
          6 diffuser_outlet_diameter
          7 massflow



   .. py:method:: compute_loss_Coppage(args_minimal, impeller_outlet_flow_angle)

      args_minimal must have, in every case:
          0 impeller_outlet_velocity V2 [V2mid meridional ; V2mid tangential]
          1 diffuser_outlet_velocity 2 coordinates
          2 blade_height
          3 diffuser_outlet_height
          4 kinematicvisc: average kinematic viscosity used to compute the Reynolds number
          5 impeller_outlet_diameter
          6 diffuser_outlet_diameter
          7 massflow



   .. py:method:: compute_loss_Stanitz(args_minimal, kpv, mach, cp, temperature, pressure, densities, idx_impeller_outlet, idx_diffuser_outlet)

      args_minimal must have, in every case:
          0 impeller_outlet_velocity V2 [V2mid meridional ; V2mid tangential]
          1 diffuser_outlet_velocity 2 coordinates
          2 blade_height
          3 diffuser_outlet_height
          4 kinematicvisc: average kinematic viscosity used to compute the Reynolds number
          5 impeller_outlet_diameter
          6 diffuser_outlet_diameter
          7 massflow
      kpv: Isentropic expansion coefficient
      mach: Mach number at impeller's outlet
      cp: caloric capacity at constant pressure at impeller's outlet
      temperature: temperature array _T from Compressor class in compressor.py
      pressure: pressure array from _P Compressor class in compressor.py
      densities: densities array _densities from Compressor class in compressor.py
      idx_impeller_outlet: index to find impeller outlet properties in temperture, pressure or densities
      idx_diffuser_outlet: index to find diffuser's outlet properties in temperture, pressure or densities



   .. py:method:: compute_loss(type='Stanitz', args_minimal=[0] * 8, args=[])

      args_minimal must have, in every case:
          0 impeller_outlet_velocity V2 [V2mid meridional ; V2mid tangential]
          1 diffuser_outlet_velocity 2 coordinates
          2 blade_height
          3 diffuser_outlet_height
          4 kinematicvisc: average kinematic viscosity used to compute the Reynolds number
          5 impeller_outlet_diameter
          6 diffuser_outlet_diameter
          7 massflow
      args for Coppage are
          impeller_outlet_flow_angle
      args for Stanitz are
          kpv: Isentropic expansion coefficient
          mach: Mach number at impeller's outlet
          cp: caloric capacity at constant pressure at impeller's outlet
          temperature: temperature array _T from Compressor class in compressor.py
          pressure: pressure array from _P Compressor class in compressor.py
          densities: densities array _densities from Compressor class in compressor.py
          idx_impeller_outlet: index to find impeller outlet properties in temperture, pressure or densities
          idx_diffuser_outlet: index to find diffuser's outlet properties in temperture, pressure or densities



.. py:class:: VaneddiffuserLoss

   .. py:attribute:: _type
      :value: 'outside'



   .. py:attribute:: _name
      :value: 'Vaned diffuser'



   .. py:attribute:: _value
      :value: 0



.. py:class:: VoluteLoss

   Computes the mixing loss when the flow in the impeller separates

   Equations 2.143 of S. Parisi PhD thesis


   .. py:attribute:: _type
      :value: 'outside'



   .. py:attribute:: _name
      :value: 'Volute'



   .. py:attribute:: _value
      :value: 0



   .. py:method:: compute_loss(diffuser_meridional_velocity)

      Computes the separation velocity

      Equation 2.105 of S. Parisi PhD thesis. Separation velocity

      :param diffuser_meridional_velocity: Diffuser's outlet meridional velocity V4m
      :type diffuser_meridional_velocity: float

      :returns: Volute loss according to equation 2.143 of S. Parisi PhD thesis
      :rtype: float



.. py:data:: sf

